{"version":3,"sources":["typewriter1.jpg","components/Navbar.js","components/Home.js","components/Contact.js","components/About.js","components/Post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","withRouter","props","console","log","react_default","a","createElement","className","Link","to","id","NavLink","Home","state","posts","_this2","this","elems","document","querySelectorAll","M","Parallax","init","axios","get","then","res","data","setState","slice","postList","length","map","post","key","title","body","href","src","Hero","alt","Component","Contact","About","Post","match","params","post_id","App","BrowserRouter","components_Navbar","Switch","Route","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72d502f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/typewriter1.c9b07678.jpg\";","import React from 'react'\r\nimport { Link, NavLink, withRouter } from 'react-router-dom'\r\n\r\n\r\nconst Navbar = (props) =>{\r\n    console.log(props)\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper\">\r\n                <div className=\"container\">\r\n                    <Link to=\"/\" className=\"brand-logo\">Logo</Link>\r\n                    <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                        <li><NavLink to=\"/\">Home</NavLink></li>\r\n                        <li><NavLink to=\"/Contact\">Contact</NavLink></li>\r\n                        <li><NavLink to=\"/About\">About</NavLink></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n        \r\n    )\r\n}\r\n\r\nexport default withRouter(Navbar)","import React, { Component } from 'react'\r\nimport Hero from '../typewriter1.jpg'\r\nimport M from 'materialize-css'\r\nimport axios from 'axios'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\nclass Home extends Component {\r\n    //Blog posts\r\n    state ={\r\n        posts: []\r\n    }\r\n    componentDidMount(){\r\n        //Fire up Parallax from materialize\r\n        var elems = document.querySelectorAll('.parallax');\r\n        M.Parallax.init(elems);\r\n\r\n        //Axios dummyData, asynchronous, returns a promise (so we use then, when the promise returns)\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res =>{\r\n            console.log(res.data[0])\r\n            this.setState({\r\n                //Grab the first 10 posts\r\n                posts: res.data.slice(0,10)\r\n            })\r\n        })\r\n    };\r\n    render(){\r\n        const { posts } = this.state;\r\n\r\n        //Check if we have posts or not\r\n        const postList = posts.length ? (\r\n            posts.map(post => {\r\n                return(\r\n                    <div className=\"post card\" key={post.id}>\r\n                        <div className=\"card-content\">\r\n                            <Link to={ '/' + post.id}>\r\n                                <span className=\"card-title\">{post.title}</span>\r\n                                <p>{post.body}</p>\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ) : (\r\n            <div className=\"center\">\r\n                No Posts Yet\r\n            </div>\r\n        )\r\n        return(\r\n            <section>\r\n                <div id=\"index-banner\" className=\"parallax-container\">  \r\n                    <div className=\"section no-pad-bot\">\r\n                        <div className=\"container\">\r\n                            <h1 className=\"header center white-text\">The Writer's Blog</h1>\r\n                            <div className=\"row center\">\r\n                                <h5 className=\"header col s12 white-text\">A React powered Blog</h5>\r\n                            </div>\r\n                            <div className=\"row center\">\r\n                                <a href=\"http://materializecss.com/getting-started.html\" id=\"download-button\" className=\"btn-large waves-effect waves-light teal lighten-1\">Get Started</a>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"parallax\"><img src={ Hero } alt=\"Unsplashed background img 1\" /></div>\r\n                </div>\r\n                <div>\r\n                </div>\r\n                <div className=\"container post-list-container\">\r\n                <p>A bunch of posts loaded dinamycally with Axios from \"jsonplaceholder.typicode.com\"</p>\r\n                    {postList}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react'\r\n\r\nconst Contact = () =>{\r\n    \r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">Contact</h4>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam atque velit ratione! Voluptas accusantium corrupti rem et ea! Tempora deserunt aliquam optio ducimus eius voluptatem aperiam recusandae voluptas facilis aliquid.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import React from 'react'\r\n\r\nconst About = () =>{\r\n    return(\r\n        <div className=\"container\">\r\n            <h4 className=\"center\">About</h4>\r\n            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Quibusdam atque velit ratione! Voluptas accusantium corrupti rem et ea! Tempora deserunt aliquam optio ducimus eius voluptatem aperiam recusandae voluptas facilis aliquid.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nclass Post extends Component{\r\n    state = {\r\n        post: null\r\n    }\r\n    componentDidMount(){\r\n        let id = this.props.match.params.post_id;\r\n        axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n        .then(res =>{\r\n            this.setState({\r\n                post: res.data\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        //Are there posts?\r\n        const post = this.state.post ? (\r\n            <div className=\"post\">\r\n                <h4 className=\"center\">{ this.state.post.title }</h4>\r\n                <p>{ this.state.post.body }</p>\r\n            </div>\r\n        ) : (\r\n            <div className=\"center\">Loading Posts...</div>\r\n        )\r\n        return(\r\n            <div className=\"container\">\r\n                { post }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post","import React, { Component } from 'react';\n//import M from 'materialize-css'\nimport Navbar from './components/Navbar'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Contact from './components/Contact'\nimport About from './components/About'\n\nimport Post from './components/Post'\n\nclass App extends Component{\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={ Home } />\n            <Route path='/Contact' component={ Contact } />\n            <Route path='/About' component={ About } />\n            <Route path=\"/:post_id\" component={ Post } />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}